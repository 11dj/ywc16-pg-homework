{"ast":null,"code":"import axios from 'axios';\nexport var mainSearch = function mainSearch(origin, keyword) {\n  return function (dispatch) {\n    console.log('Hello mainSearch', keyword);\n    axios.post('/api/skyscanner/getSky', {\n      keyword: keyword\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      var aaa = getSky(origin, response.data); // console.log(response.data)\n      // dispatch({\n      //   type: 'mainSearch',\n      //   payload: response.data\n      // })\n      // dispatch({\n      //   type: 'LOADING_OFF'\n      // })\n\n      var wTimeOut = 0;\n      var IntervalMatch = setInterval(function () {\n        if (aaa) {\n          clearInterval(IntervalMatch);\n          dispatch({\n            type: 'GET_CHEAP',\n            payload: aaa\n          });\n        } else if (wTimeOut === 30) {} else {\n          wTimeOut = wTimeOut + 1;\n        }\n      }, 1000);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n};\nexport var getSky = function getSky(origin, destination) {\n  console.log('SKYYYY', destination);\n  console.log('fllll', destination);\n  axios.post('/api/skyscanner/getCheap', {\n    origin: origin,\n    destination: destination\n  }, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    console.log(response.data);\n    return response.data;\n  }).catch(function (error) {\n    console.log(error);\n  });\n};\nexport var getCurrentCity = function getCurrentCity(l) {\n  return function (dispatch) {\n    axios.get('/api/ip/getIP').then(function (response) {\n      dispatch({\n        type: 'GET_IP',\n        payload: {\n          ip: response.data.ip_address,\n          city: response.data.city,\n          country: response.data.country,\n          lat: response.data.latitude,\n          lng: response.data.longitude\n        }\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/kittis/project/ywc/tiewnaidy/client/src/actions/main.js"],"names":["axios","mainSearch","origin","keyword","dispatch","console","log","post","headers","then","response","aaa","getSky","data","wTimeOut","IntervalMatch","setInterval","clearInterval","type","payload","catch","error","destination","getCurrentCity","l","get","ip","ip_address","city","country","lat","latitude","lng","longitude"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\n\nexport const mainSearch = (origin, keyword) => {\n  return function (dispatch) {\n    console.log('Hello mainSearch', keyword)\n    axios.post('/api/skyscanner/getSky',\n    { keyword },\n    { headers: { 'Content-Type': 'application/json' }\n    })\n    .then((response) => {\n      let aaa = getSky(origin, response.data)\n      // console.log(response.data)\n      // dispatch({\n      //   type: 'mainSearch',\n      //   payload: response.data\n      // })\n      // dispatch({\n      //   type: 'LOADING_OFF'\n      // })\n      let wTimeOut = 0\n      let IntervalMatch = setInterval(() => {\n        if (aaa) {\n          clearInterval(IntervalMatch)\n          dispatch({\n            type: 'GET_CHEAP',\n            payload: aaa\n          })\n        } else if (wTimeOut === 30) {\n        } else {\n          wTimeOut = wTimeOut + 1\n        }\n      }, 1000)\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n}\n\nexport const getSky = (origin, destination) => {\n  console.log('SKYYYY', destination)\n    console.log('fllll', destination)\n    axios.post('/api/skyscanner/getCheap',\n    { origin, destination },\n    { headers: { 'Content-Type': 'application/json' }\n    })\n    .then((response) => {\n      console.log(response.data)\n\n      return response.data\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n}\n\nexport const getCurrentCity = (l) => {\n  return function (dispatch) {\n    axios.get('/api/ip/getIP')\n    .then((response) => {\n      dispatch({\n        type: 'GET_IP',\n        payload: {\n          ip: response.data.ip_address,\n          city: response.data.city,\n          country: response.data.country,\n          lat: response.data.latitude,\n          lng: response.data.longitude\n        }\n      })\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}